// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	worker "github.com/gilsuk/trulit-price-daily/collector/worker"
	mock "github.com/stretchr/testify/mock"
)

// Worker is an autogenerated mock type for the Worker type
type Worker struct {
	mock.Mock
}

type Worker_Expecter struct {
	mock *mock.Mock
}

func (_m *Worker) EXPECT() *Worker_Expecter {
	return &Worker_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: _a0
func (_m *Worker) Do(_a0 worker.Request) {
	_m.Called(_a0)
}

// Worker_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type Worker_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - _a0 worker.Request
func (_e *Worker_Expecter) Do(_a0 interface{}) *Worker_Do_Call {
	return &Worker_Do_Call{Call: _e.mock.On("Do", _a0)}
}

func (_c *Worker_Do_Call) Run(run func(_a0 worker.Request)) *Worker_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(worker.Request))
	})
	return _c
}

func (_c *Worker_Do_Call) Return() *Worker_Do_Call {
	_c.Call.Return()
	return _c
}

func (_c *Worker_Do_Call) RunAndReturn(run func(worker.Request)) *Worker_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorker creates a new instance of Worker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Worker {
	mock := &Worker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
