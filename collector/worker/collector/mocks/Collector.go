// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Collector is an autogenerated mock type for the Collector type
type Collector struct {
	mock.Mock
}

type Collector_Expecter struct {
	mock *mock.Mock
}

func (_m *Collector) EXPECT() *Collector_Expecter {
	return &Collector_Expecter{mock: &_m.Mock}
}

// Collect provides a mock function with given fields:
func (_m *Collector) Collect() {
	_m.Called()
}

// Collector_Collect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collect'
type Collector_Collect_Call struct {
	*mock.Call
}

// Collect is a helper method to define mock.On call
func (_e *Collector_Expecter) Collect() *Collector_Collect_Call {
	return &Collector_Collect_Call{Call: _e.mock.On("Collect")}
}

func (_c *Collector_Collect_Call) Run(run func()) *Collector_Collect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Collector_Collect_Call) Return() *Collector_Collect_Call {
	_c.Call.Return()
	return _c
}

func (_c *Collector_Collect_Call) RunAndReturn(run func()) *Collector_Collect_Call {
	_c.Call.Return(run)
	return _c
}

// NewCollector creates a new instance of Collector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Collector {
	mock := &Collector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
